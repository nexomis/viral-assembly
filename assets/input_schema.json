{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nexomis/rna-preprocessing/main/assets/input_schema.json",
    "title": "Sample sheet format for --input",
    "description": "Sample ids with reads paths and metadata",
    "type": "array",
    "items": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "uniqueItems": true,
          "description": "Sample unique IDs (alphanum or _)"
        },
        "R1": {
          "type": "string",
          "pattern": "^\\S+\\.(fastq|fq|spring)(\\.)?(gz|z|)?$",
          "format": "file-path",
          "description": "Path for R1 reads with (.fastq, .fq), can be gziped. Spring files accepted."
        },
        "R2": {
          "description": "Path for R2 reads with (.fastq, .fq), can be gziped.",
          "anyOf": [
            {
              "type": "string",
              "pattern": "^\\S+\\.(fastq|fq)(\\.)?(gz|z|gzip)?$",
              "format": "file-path"
            },
            {
              "type": "string",
              "maxLength": 0
            }
          ],
          "default": ""
        },
        "ref_genome": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]*$", 
          "description": "Id of the reference genome from --ref_genomes.",
          "default": ""
        },
        "class_dbs": {
          "pattern": "^[a-zA-Z0-9_]*(;[a-zA-Z0-9_]+)*$",
          "type": "string",
          "description": "Semilocon-separated list of classification databases --class_dbs for iterative removal of reads",
          "default": ""
        },
        "class_tool": {
          "enum": ["kraken2"],
          "type": "string",
          "description": "Classification tool to use for iterative removal of reads",
          "default": ""
        },
        "assembler":  {
          "type": "string",
          "default" : "spades_rnaviral",
          "pattern": "^(spades_rnaviral|spades_metaviral|spades_corona)(;(spades_rnaviral|spades_metaviral|spades_corona))*$",
          "description": "Semilocon-separated list of assembly strategy from \"spades_rnaviral\",\"spades_metaviral\",\"spades_corona\""
        },
        "realign":  {
          "type": "string",
          "default" : "yes",
          "description": "Whether to realign reads vs assembly"
        },
        "do_abacas":  {
          "type": "string",
          "default" : "yes",
          "description": "Whether to perform abacas with the provided reference (if any)"
        },
        "keep_before_abacas":  {
          "type": "string",
          "default" : "yes",
          "description": "Whether to keep scaffolds before abacas to Quast"
        },
        "dedup":  {
          "type": "string",
          "default" : "yes",
          "description": "Whether to perform deduplication before assembly"
        },
        "keep_before_dedup":  {
          "type": "string",
          "default" : "no",
          "description": "Whether to keep reads before depud to generate both assembly before and after dedup"
        }
      },
      "required": ["id", "R1"]
    }
  }

I would like you to write a groovy function that take as input a json schema like above and as output 

Required columns:
  sample_name     [string]    Sample name must contains only alphanumeric chars or underscore
  {{key}}         [{{type}}]  {{description}}

Optional columns:
  {{key}}         [{{type}}]  {{description}} 

I want it to be a function that I put in a module file imported in main.nf workflow file and then used with `log.info showSchemaHelp("assets/input_schema.json")`


